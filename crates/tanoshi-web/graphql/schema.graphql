schema {
  query: QueryRoot
  mutation: MutationRoot
}

# Directs the executor to query only when the field exists.
directive @ifdef on FIELD

type Chapter {
  id: Int!
  title: String!
  path: String!
  number: Float!
  scanlator: String!
  prev: Int
  next: Int
  readProgress: ReadProgress
  uploaded: NaiveDateTime!
  dateAdded: NaiveDateTime!
  manga: Manga!
  pages(
    # fetch from source
    fetch: Boolean! = false
  ): [String!]!
}

type Filters {
  default: String!
  fields: JSON!
}

# A scalar that can represent any JSON value.
scalar JSON

type Manga {
  id: Int!
  title: String!
  author: [String!]!
  genre: [String!]!
  status: String
  description: String
  path: String!
  coverUrl: String!
  isFavorite: Boolean!
  dateAdded: NaiveDateTime!
  unreadChapterCount: Int!
  source: Source!
  chapters(
    # refresh data from source
    refresh: Boolean! = false
  ): [Chapter!]!
  chapter(
    # chapter id
    id: Int!
  ): Chapter!
}

type MutationRoot {
  addToLibrary(
    # manga id
    mangaId: Int!
  ): Int!
  deleteFromLibrary(
    # manga id
    mangaId: Int!
  ): Int!
  updatePageReadAt(
    # chapter id
    chapterId: Int!

    # page
    page: Int!
  ): Int!
  markChapterAsRead(
    # chapter ids
    chapterIds: [Int!]!
  ): Int!
  markChapterAsUnread(
    # chapter ids
    chapterIds: [Int!]!
  ): Int!
  register(
    # username
    username: String!

    # password
    password: String!

    # role
    isAdmin: Boolean! = false
  ): Int!
  changePassword(
    # old password
    oldPassword: String!

    # new password
    newPassword: String!
  ): Int!
  updateProfile(
    # telegram chat id
    telegramChatId: Int
  ): Int!
  installSource(sourceId: Int!): Int!
  uninstallSource(sourceId: Int!): Int!
  updateSource(sourceId: Int!): Int!
}

scalar NaiveDateTime

# Information about pagination in a connection
type PageInfo {
  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type QueryRoot {
  installedSources: [Source!]!
  availableSources: [Source!]!
  source(sourceId: Int!): Source!
  browseSource(
    # source id
    sourceId: Int!

    # keyword of the manga
    keyword: String

    # genres of the manga
    genres: [String!]

    # page
    page: Int

    # sort by
    sortBy: SortByParam

    # sort order
    sortOrder: SortOrderParam
  ): [Manga!]!
  mangaBySourcePath(
    # source id
    sourceId: Int!

    # path to manga in source
    path: String!
  ): Manga!
  manga(
    # manga id
    id: Int!

    # refresh data from source
    refresh: Boolean! = false
  ): Manga!
  chapter(
    # chapter id
    id: Int!
  ): Chapter!
  library(
    # refresh data from source
    refresh: Boolean! = false
  ): [Manga!]!
  recentUpdates(
    after: String
    before: String
    first: Int
    last: Int
  ): RecentUpdateConnection!
  recentChapters(
    after: String
    before: String
    first: Int
    last: Int
  ): RecentChapterConnection!
  login(
    # username
    username: String!

    # password
    password: String!
  ): String!
  users: [User!]!
  me: User!
  serverStatus: Status!
  testTelegram(
    # telegram chat id
    chatId: Int!
  ): Boolean!
}

type ReadProgress {
  at: NaiveDateTime!
  lastPage: Int!
  isComplete: Boolean!
}

type RecentChapter {
  mangaId: Int!
  chapterId: Int!
  mangaTitle: String!
  coverUrl: String!
  chapterTitle: String!
  readAt: NaiveDateTime!
  lastPageRead: Int!
}

type RecentChapterConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [RecentChapterEdge]
}

# An edge in a connection.
type RecentChapterEdge {
  # The item at the end of the edge
  node: RecentChapter!

  # A cursor for use in pagination
  cursor: String!
}

type RecentUpdate {
  mangaId: Int!
  chapterId: Int!
  mangaTitle: String!
  coverUrl: String!
  chapterTitle: String!
  uploaded: NaiveDateTime!
}

type RecentUpdateConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [RecentUpdateEdge]
}

# An edge in a connection.
type RecentUpdateEdge {
  # The item at the end of the edge
  node: RecentUpdate!

  # A cursor for use in pagination
  cursor: String!
}

type Settings {
  telegramChatId: Int
}

# A type represent sort parameter for query manga from source, normalized across sources
enum SortByParam {
  LAST_UPDATED
  TITLE
  COMMENT
  VIEWS
}

# A type represent order parameter for query manga from source, normalized across sources
enum SortOrderParam {
  ASC
  DESC
}

type Source {
  id: Int!
  name: String!
  version: String!
  icon: String!
  needLogin: Boolean!
  hasUpdate: Boolean!
  filters: Filters
}

type Status {
  activated: Boolean!
  version: String!
}

type User {
  id: Int!
  username: String!
  isAdmin: Boolean!
  settings: Settings!
}
