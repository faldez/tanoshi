name: release

on:
  push:
    tags:
      - v[0-9]+.[0-9]+.[0-9]+

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
  build-docker:
    runs-on: ubuntu-latest
    environment: default
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/v}" >> $GITHUB_ENV
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: faldez/tanoshi:latest,faldez/tanoshi:${{ env.RELEASE_VERSION }}
  build:
    runs-on: ${{ matrix.os }}
    needs: create-release
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        include:
          - os: ubuntu-latest
            filename: tanoshi
            asset: tanoshi-linux
          - os: macos-latest
            filename: tanoshi
            asset: tanoshi-macos
          - os: windows-latest
            filename: tanoshi.exe
            asset: tanoshi-win.exe
    steps:
      - uses: actions/checkout@v2
      - name: Install deps
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: sudo apt update && sudo apt install -y libssl-dev libarchive-dev build-essential cmake llvm clang libicu-dev nettle-dev libacl1-dev liblzma-dev libzstd-dev liblz4-dev libbz2-dev zlib1g-dev libxml2-dev
      - name: Install deps
        if: ${{ matrix.os == 'macos-latest' }}
        run: brew install icu4c libarchive bzip2 lz4 zlib expat
      - name: Install LLVM and Clang
        if: ${{ matrix.os == 'windows-latest' }}
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "11.1"
      - name: Install deps
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          vcpkg integrate install
          vcpkg install --only-downloads libarchive:x64-windows-static-md
          vcpkg install libarchive:x64-windows-static-md
      - name: Install trunk
        run: |
          cargo install trunk wasm-bindgen-cli
          rustup target add wasm32-unknown-unknown
      - name: Build tanoshi-web
        run: cd tanoshi-web && trunk build --release
      - name: Build tanoshi
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: cargo build -p tanoshi --release
      - name: Build tanoshi
        if: ${{ matrix.os == 'macos-latest' }}
        run: cargo build -p tanoshi --release
        env:
          PKG_CONFIG_PATH: /usr/local/opt/icu4c/lib/pkgconfig:/usr/local/opt/libarchive/lib/pkgconfig:/usr/local/opt/zlib/lib/pkgconfig:/usr/local/opt/expat/lib/pkgconfig
      - name: Build tanoshi
        if: ${{ matrix.os == 'windows-latest' }}
        run: cargo build -p tanoshi --release
        env:
          LIBCLANG_PATH: C:\Program Files\LLVM\bin
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ${{ github.workspace }}/target/release/${{ matrix.filename }}
          asset_name: ${{ matrix.asset }}
          asset_content_type: application/octet-stream
